
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000029c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000430  08000430  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000430  08000430  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000430  08000430  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000430  08000430  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000430  08000430  00010430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000434  08000434  00010434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000438  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  0800043c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800043c  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001bee  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000005da  00000000  00000000  00021c22  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001e0  00000000  00000000  00022200  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000198  00000000  00000000  000223e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013bbc  00000000  00000000  00022578  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001e13  00000000  00000000  00036134  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007efc8  00000000  00000000  00037f47  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b6f0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005b4  00000000  00000000  000b6f8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000418 	.word	0x08000418

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000418 	.word	0x08000418

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	/* Enable GPIOA */
	SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOAEN);
 80001da:	4b38      	ldr	r3, [pc, #224]	; (80002bc <main+0xe8>)
 80001dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001de:	4a37      	ldr	r2, [pc, #220]	; (80002bc <main+0xe8>)
 80001e0:	f043 0301 	orr.w	r3, r3, #1
 80001e4:	6313      	str	r3, [r2, #48]	; 0x30
	  __IO uint32_t tempreg = READ_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOAEN);
 80001e6:	4b35      	ldr	r3, [pc, #212]	; (80002bc <main+0xe8>)
 80001e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001ea:	f003 0301 	and.w	r3, r3, #1
 80001ee:	603b      	str	r3, [r7, #0]

	/* Configure LED (PA.5) as push-pull output, No pull-up, pull-down */ CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODER5);
 80001f0:	4b33      	ldr	r3, [pc, #204]	; (80002c0 <main+0xec>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a32      	ldr	r2, [pc, #200]	; (80002c0 <main+0xec>)
 80001f6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80001fa:	6013      	str	r3, [r2, #0]
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODER5_0); CLEAR_BIT(GPIOA->OTYPER, GPIO_ODR_ODR_5); CLEAR_BIT(GPIOA->OSPEEDR, GPIO_OSPEEDER_OSPEEDR5); SET_BIT(GPIOA->OSPEEDR, GPIO_OSPEEDER_OSPEEDR5_0); CLEAR_BIT(GPIOA->PUPDR, GPIO_PUPDR_PUPDR5);
 80001fc:	4b30      	ldr	r3, [pc, #192]	; (80002c0 <main+0xec>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a2f      	ldr	r2, [pc, #188]	; (80002c0 <main+0xec>)
 8000202:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000206:	6013      	str	r3, [r2, #0]
 8000208:	4b2d      	ldr	r3, [pc, #180]	; (80002c0 <main+0xec>)
 800020a:	685b      	ldr	r3, [r3, #4]
 800020c:	4a2c      	ldr	r2, [pc, #176]	; (80002c0 <main+0xec>)
 800020e:	f023 0320 	bic.w	r3, r3, #32
 8000212:	6053      	str	r3, [r2, #4]
 8000214:	4b2a      	ldr	r3, [pc, #168]	; (80002c0 <main+0xec>)
 8000216:	689b      	ldr	r3, [r3, #8]
 8000218:	4a29      	ldr	r2, [pc, #164]	; (80002c0 <main+0xec>)
 800021a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800021e:	6093      	str	r3, [r2, #8]
 8000220:	4b27      	ldr	r3, [pc, #156]	; (80002c0 <main+0xec>)
 8000222:	689b      	ldr	r3, [r3, #8]
 8000224:	4a26      	ldr	r2, [pc, #152]	; (80002c0 <main+0xec>)
 8000226:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800022a:	6093      	str	r3, [r2, #8]
 800022c:	4b24      	ldr	r3, [pc, #144]	; (80002c0 <main+0xec>)
 800022e:	68db      	ldr	r3, [r3, #12]
 8000230:	4a23      	ldr	r2, [pc, #140]	; (80002c0 <main+0xec>)
 8000232:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000236:	60d3      	str	r3, [r2, #12]

	/* Enable GPIOC */
	SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOCEN);
 8000238:	4b20      	ldr	r3, [pc, #128]	; (80002bc <main+0xe8>)
 800023a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800023c:	4a1f      	ldr	r2, [pc, #124]	; (80002bc <main+0xe8>)
 800023e:	f043 0304 	orr.w	r3, r3, #4
 8000242:	6313      	str	r3, [r2, #48]	; 0x30
	tempreg = READ_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOCEN);
 8000244:	4b1d      	ldr	r3, [pc, #116]	; (80002bc <main+0xe8>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000248:	f003 0304 	and.w	r3, r3, #4
 800024c:	603b      	str	r3, [r7, #0]

	CLEAR_BIT(GPIOC->MODER, GPIO_MODER_MODER13); CLEAR_BIT(GPIOC->OSPEEDR, GPIO_OSPEEDER_OSPEEDR13); SET_BIT(GPIOC->OSPEEDR, GPIO_OSPEEDER_OSPEEDR13_0); CLEAR_BIT(GPIOC->PUPDR, GPIO_PUPDR_PUPDR13);
 800024e:	4b1d      	ldr	r3, [pc, #116]	; (80002c4 <main+0xf0>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	4a1c      	ldr	r2, [pc, #112]	; (80002c4 <main+0xf0>)
 8000254:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000258:	6013      	str	r3, [r2, #0]
 800025a:	4b1a      	ldr	r3, [pc, #104]	; (80002c4 <main+0xf0>)
 800025c:	689b      	ldr	r3, [r3, #8]
 800025e:	4a19      	ldr	r2, [pc, #100]	; (80002c4 <main+0xf0>)
 8000260:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000264:	6093      	str	r3, [r2, #8]
 8000266:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <main+0xf0>)
 8000268:	689b      	ldr	r3, [r3, #8]
 800026a:	4a16      	ldr	r2, [pc, #88]	; (80002c4 <main+0xf0>)
 800026c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000270:	6093      	str	r3, [r2, #8]
 8000272:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <main+0xf0>)
 8000274:	68db      	ldr	r3, [r3, #12]
 8000276:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <main+0xf0>)
 8000278:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800027c:	60d3      	str	r3, [r2, #12]

	/* Infinite loop */
	while (1) {
	if(!READ_BIT(GPIOC->IDR, GPIO_IDR_IDR_13)){ GPIOA->ODR ^= GPIO_ODR_ODR_5;
 800027e:	4b11      	ldr	r3, [pc, #68]	; (80002c4 <main+0xf0>)
 8000280:	691b      	ldr	r3, [r3, #16]
 8000282:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000286:	2b00      	cmp	r3, #0
 8000288:	d106      	bne.n	8000298 <main+0xc4>
 800028a:	4b0d      	ldr	r3, [pc, #52]	; (80002c0 <main+0xec>)
 800028c:	695b      	ldr	r3, [r3, #20]
 800028e:	4a0c      	ldr	r2, [pc, #48]	; (80002c0 <main+0xec>)
 8000290:	f083 0320 	eor.w	r3, r3, #32
 8000294:	6153      	str	r3, [r2, #20]
 8000296:	e005      	b.n	80002a4 <main+0xd0>
	} else
	CLEAR_BIT(GPIOA->ODR, GPIO_ODR_ODR_5);
 8000298:	4b09      	ldr	r3, [pc, #36]	; (80002c0 <main+0xec>)
 800029a:	695b      	ldr	r3, [r3, #20]
 800029c:	4a08      	ldr	r2, [pc, #32]	; (80002c0 <main+0xec>)
 800029e:	f023 0320 	bic.w	r3, r3, #32
 80002a2:	6153      	str	r3, [r2, #20]

	for(int i=0; i<1000000;i++)
 80002a4:	2300      	movs	r3, #0
 80002a6:	607b      	str	r3, [r7, #4]
 80002a8:	e003      	b.n	80002b2 <main+0xde>
	  __NOP();
 80002aa:	bf00      	nop
	for(int i=0; i<1000000;i++)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	3301      	adds	r3, #1
 80002b0:	607b      	str	r3, [r7, #4]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	4a04      	ldr	r2, [pc, #16]	; (80002c8 <main+0xf4>)
 80002b6:	4293      	cmp	r3, r2
 80002b8:	ddf7      	ble.n	80002aa <main+0xd6>
	if(!READ_BIT(GPIOC->IDR, GPIO_IDR_IDR_13)){ GPIOA->ODR ^= GPIO_ODR_ODR_5;
 80002ba:	e7e0      	b.n	800027e <main+0xaa>
 80002bc:	40023800 	.word	0x40023800
 80002c0:	40020000 	.word	0x40020000
 80002c4:	40020800 	.word	0x40020800
 80002c8:	000f423f 	.word	0x000f423f

080002cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80002d0:	bf00      	nop
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr

080002da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002da:	b480      	push	{r7}
 80002dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002de:	e7fe      	b.n	80002de <HardFault_Handler+0x4>

080002e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002e4:	e7fe      	b.n	80002e4 <MemManage_Handler+0x4>

080002e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002e6:	b480      	push	{r7}
 80002e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002ea:	e7fe      	b.n	80002ea <BusFault_Handler+0x4>

080002ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002f0:	e7fe      	b.n	80002f0 <UsageFault_Handler+0x4>

080002f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002f2:	b480      	push	{r7}
 80002f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002f6:	bf00      	nop
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr

08000300 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000304:	bf00      	nop
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr

0800030e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800030e:	b480      	push	{r7}
 8000310:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000312:	bf00      	nop
 8000314:	46bd      	mov	sp, r7
 8000316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031a:	4770      	bx	lr

0800031c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000320:	f000 f842 	bl	80003a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000324:	bf00      	nop
 8000326:	bd80      	pop	{r7, pc}

08000328 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800032c:	4b08      	ldr	r3, [pc, #32]	; (8000350 <SystemInit+0x28>)
 800032e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000332:	4a07      	ldr	r2, [pc, #28]	; (8000350 <SystemInit+0x28>)
 8000334:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000338:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800033c:	4b04      	ldr	r3, [pc, #16]	; (8000350 <SystemInit+0x28>)
 800033e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000342:	609a      	str	r2, [r3, #8]
#endif
}
 8000344:	bf00      	nop
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	e000ed00 	.word	0xe000ed00

08000354 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000354:	f8df d034 	ldr.w	sp, [pc, #52]	; 800038c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000358:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800035a:	e003      	b.n	8000364 <LoopCopyDataInit>

0800035c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800035c:	4b0c      	ldr	r3, [pc, #48]	; (8000390 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800035e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000360:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000362:	3104      	adds	r1, #4

08000364 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000364:	480b      	ldr	r0, [pc, #44]	; (8000394 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000366:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000368:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800036a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800036c:	d3f6      	bcc.n	800035c <CopyDataInit>
  ldr  r2, =_sbss
 800036e:	4a0b      	ldr	r2, [pc, #44]	; (800039c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000370:	e002      	b.n	8000378 <LoopFillZerobss>

08000372 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000372:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000374:	f842 3b04 	str.w	r3, [r2], #4

08000378 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000378:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800037a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800037c:	d3f9      	bcc.n	8000372 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800037e:	f7ff ffd3 	bl	8000328 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000382:	f000 f825 	bl	80003d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000386:	f7ff ff25 	bl	80001d4 <main>
  bx  lr    
 800038a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800038c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000390:	08000438 	.word	0x08000438
  ldr  r0, =_sdata
 8000394:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000398:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 800039c:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 80003a0:	20000024 	.word	0x20000024

080003a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003a4:	e7fe      	b.n	80003a4 <ADC_IRQHandler>
	...

080003a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003ac:	4b06      	ldr	r3, [pc, #24]	; (80003c8 <HAL_IncTick+0x20>)
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	461a      	mov	r2, r3
 80003b2:	4b06      	ldr	r3, [pc, #24]	; (80003cc <HAL_IncTick+0x24>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4413      	add	r3, r2
 80003b8:	4a04      	ldr	r2, [pc, #16]	; (80003cc <HAL_IncTick+0x24>)
 80003ba:	6013      	str	r3, [r2, #0]
}
 80003bc:	bf00      	nop
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	20000000 	.word	0x20000000
 80003cc:	20000020 	.word	0x20000020

080003d0 <__libc_init_array>:
 80003d0:	b570      	push	{r4, r5, r6, lr}
 80003d2:	4e0d      	ldr	r6, [pc, #52]	; (8000408 <__libc_init_array+0x38>)
 80003d4:	4c0d      	ldr	r4, [pc, #52]	; (800040c <__libc_init_array+0x3c>)
 80003d6:	1ba4      	subs	r4, r4, r6
 80003d8:	10a4      	asrs	r4, r4, #2
 80003da:	2500      	movs	r5, #0
 80003dc:	42a5      	cmp	r5, r4
 80003de:	d109      	bne.n	80003f4 <__libc_init_array+0x24>
 80003e0:	4e0b      	ldr	r6, [pc, #44]	; (8000410 <__libc_init_array+0x40>)
 80003e2:	4c0c      	ldr	r4, [pc, #48]	; (8000414 <__libc_init_array+0x44>)
 80003e4:	f000 f818 	bl	8000418 <_init>
 80003e8:	1ba4      	subs	r4, r4, r6
 80003ea:	10a4      	asrs	r4, r4, #2
 80003ec:	2500      	movs	r5, #0
 80003ee:	42a5      	cmp	r5, r4
 80003f0:	d105      	bne.n	80003fe <__libc_init_array+0x2e>
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80003f8:	4798      	blx	r3
 80003fa:	3501      	adds	r5, #1
 80003fc:	e7ee      	b.n	80003dc <__libc_init_array+0xc>
 80003fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000402:	4798      	blx	r3
 8000404:	3501      	adds	r5, #1
 8000406:	e7f2      	b.n	80003ee <__libc_init_array+0x1e>
 8000408:	08000430 	.word	0x08000430
 800040c:	08000430 	.word	0x08000430
 8000410:	08000430 	.word	0x08000430
 8000414:	08000434 	.word	0x08000434

08000418 <_init>:
 8000418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800041a:	bf00      	nop
 800041c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041e:	bc08      	pop	{r3}
 8000420:	469e      	mov	lr, r3
 8000422:	4770      	bx	lr

08000424 <_fini>:
 8000424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000426:	bf00      	nop
 8000428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800042a:	bc08      	pop	{r3}
 800042c:	469e      	mov	lr, r3
 800042e:	4770      	bx	lr
